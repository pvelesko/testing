<?xml version="1.0" encoding="UTF-8"?>
<bag xmlns:boolean="http://www.w3.org/2001/XMLSchema#boolean" xmlns:exsl="http://exslt.org/common" xmlns:int="http://www.w3.org/2001/XMLSchema#int" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
 <internal xsl:version="1.0" exsl:keep_exsl_namespace="">
  <name>%GpuProfilingExpHotspotsAtypeName</name>
  <shortName>%GpuProfilingExpHotspotsAtypeName</shortName>
  <description>%GpuProfilingExpHotspotsDescription</description>
  <abbreviation>gh</abbreviation>
  <alias>gpu-hotspots</alias>
  <int:schemaVersion>1</int:schemaVersion>
  <int:contentVersion>1</int:contentVersion>
  <property name="helpId">intel.phe.configs.gpu_inkernel_profiling</property>
 </internal>
 <prerequisites xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:copy-of select="document('config://analysis_type/include/require_connection.xsl?connections=localhost,ssh')"/>
  <xsl:if test="exsl:ctx('targetOS')!='Windows' and exsl:ctx('targetOS')!='Linux' and exsl:ctx('targetOS')!='MacOSX'">
   <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
  </xsl:if>
 </prerequisites>
 <knobs xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="knobsParams">
   <params isGpuSamplingIntervalVisible="false" isGPUUsageVisible="false" isOpenCLCollectionVisible="true" gpuCollectModeApplyKnob="gpuProfilingModeAtk" gpuCollectModeApplyKnobValue="characterization"/>
  </xsl:variable>
  <xsl:variable name="knobsParamsName">
   <xsl:text>config://analysis_type/include/knobs.xsl?</xsl:text>
   <xsl:for-each select="exsl:node-set($knobsParams)//@*">
    <xsl:value-of select="concat(name(), '=', .)"/>
    <xsl:text>&amp;</xsl:text>
   </xsl:for-each>
  </xsl:variable>
  <xsl:variable name="commonKnobs" select="document($knobsParamsName)"/>
  <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='gpuUsageCollection']"/>
  <stringKnob id="initialViewpoint" displayName="%InitialViewpoint" boolean:visible="false">
   <defaultValue>%InKernelProfilingViewpointName</defaultValue>
  </stringKnob>
  <groupKnob id="groupForGPUCustomControl">
   <knobProperty name="knob_control_id">gpuProfilingGroup</knobProperty>
   <knobs>
    <enumKnob id="gpuProfilingModeAtk" displayName="%GpuProfilingMode" boolean:visible="true" cliName="profiling-mode">
     <description>%GpuProfilingModeDescription</description>
     <values>
      <value displayName="%GpuProfilingModeGPUMetrics">characterization</value>
      <value displayName="%GpuProfilingModeGPUMetrics2">code-level-analysis</value>
      <defaultValue>characterization</defaultValue>
     </values>
    </enumKnob>
    <enumKnob id="metricsGroup" displayName="%GpuCountersInKernelDescription" boolean:visible="true" cliName="characterization-mode">
     <knobProperty name="apply_state">gpuProfilingModeAtk=characterization</knobProperty>
     <values>
      <value displayName="%GpuMetricsOverview">overview</value>
      <value displayName="%GpuComputeBasic">global-local-accesses</value>
      <xsl:if test="exsl:ctx('gpuPlatformIndex', 0)&gt;=6">
       <value displayName="%GpuComputeExtended">compute-extended</value>
      </xsl:if>
      <xsl:if test="exsl:ctx('connectionType','') != 'ghs'">
       <value displayName="%GpuFullCompute">full-compute</value>
      </xsl:if>
      <value displayName="%GpuMetricsDynInstCount">instruction-count</value>
      <defaultValue>overview</defaultValue>
     </values>
    </enumKnob>
    <xsl:copy-of select="$commonKnobs//knobs/booleanKnob[@id='collectMemoryBW']"/>
    <xsl:copy-of select="$commonKnobs//knobs/doubleKnob[@id='gpuSamplingInterval']"/>
    <enumKnob id="profilingMode" displayName="%GpuProfilingModeInKernelDescription" boolean:visible="true" cliName="code-level-analysis">
     <knobProperty name="apply_state">gpuProfilingModeAtk=code-level-analysis</knobProperty>
     <values>
      <value displayName="%GpuMetricsBBLatency">bb-latency</value>
      <value displayName="%GpuMetricsMemLatency">mem-latency</value>
      <defaultValue>bb-latency</defaultValue>
     </values>
    </enumKnob>
    <booleanKnob id="gpuOpenCLCollection" displayName="%GpuTraceProgrammingAPIs" cliName="collect-programming-api">
     <description>%GpuOpenCLCollectionDescription</description>
     <boolean:defaultValue>true</boolean:defaultValue>
    </booleanKnob>
    <stringKnob id="kernelsToProfileAtk" displayName="%GpuProfilingKernels" cliName="gpu-kernels-to-profile">
     <description>%GpuProfilingKernelsDescription</description>
     <defaultValue/>
     <knobProperty name="knob_control_id">KernelGrid</knobProperty>
    </stringKnob>
   </knobs>
  </groupKnob>
 </knobs>
 <analysis xsl:version="1.0" exsl:keep_exsl_namespace="" syntax="norules">
  <xsl:variable name="events" select="document('config://analysis_type/include/common_events.xsl')"/>
  <xsl:variable name="mainEvents" select="$events//events/cpi"/>
  <xsl:variable name="collectGTPin">
   <xsl:choose>
    <xsl:when test="exsl:ctx('gpuProfilingModeAtk', '') = 'characterization' and (exsl:ctx('metricsGroup', '') = 'overview' or exsl:ctx('metricsGroup', '') = 'global-local-accesses' or exsl:ctx('metricsGroup', '') = 'compute-extended' or exsl:ctx('metricsGroup', '') = 'full-compute')">
     <xsl:text>0</xsl:text>
    </xsl:when>
    <xsl:otherwise>
     <xsl:text>1</xsl:text>
    </xsl:otherwise>
   </xsl:choose>
  </xsl:variable>
  <xsl:if test="$collectGTPin = '1'">
   <xsl:choose>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'ErrorNotSupported'">
     <xsl:value-of select="exsl:error('%GpuProfilingNotSupported')"/>
    </xsl:when>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'ErrorUnsupportedHardware'">
     <xsl:value-of select="exsl:error('%GpuProfilingUnsupportedHardware')"/>
    </xsl:when>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'ErrorUnknownStatus'">
     <xsl:value-of select="exsl:error('%GpuProfilingCannotBeConfigured')"/>
    </xsl:when>
    <xsl:when test="exsl:ctx('isGTPinCollectionAvailable', '') = 'Yes'"/>
   </xsl:choose>
   <xsl:if test="exsl:ctx('kernelsToProfileAtk', '') = ''">
    <xsl:value-of select="exsl:error('%GPUEmptyKernelName')"/>
   </xsl:if>
  </xsl:if>
  <collector id="runsa">
   <xsl:variable name="isRunssApplicable" select="exsl:ctx('targetType', '') != 'system' and                                                      exsl:ctx('connectionType', '') != 'sniper' and                                                      (exsl:ctx('isTPSSAvailable', 0) or exsl:ctx('isPtraceAvailable', 0)) and                                                      not(exsl:ctx('isPtraceScopeLimited', 0))"/>
   <xsl:variable name="runtoolToUse">
    <xsl:choose>
     <xsl:when test="exsl:ctx('targetOS')='FreeBSD' or                   (exsl:ctx('targetOS')='Linux' and (contains(exsl:ctx('Hypervisor', ''),'KVM') or contains(exsl:ctx('Hypervisor', ''),'Xen')))">runsa</xsl:when>
     <xsl:otherwise>
      <xsl:choose>
       <xsl:when test="(exsl:ctx('enableStackCollect', 0) and not(exsl:ctx('isVTSSPPDriverAvailable', 0))) or                               (not(exsl:ctx('enableStackCollect', 0)) and not(exsl:ctx('isSEPDriverAvailable', 0)))">
        <xsl:choose>
         <xsl:when test="(exsl:ctx('LinuxPerfCredentials', 'NotAvailable')!='NotAvailable'                                   and exsl:ctx('LinuxPerfCredentials', 'NotAvailable')!='User'                                   and contains(exsl:ctx('LinuxPerfCapabilities', ''), 'format') and exsl:ctx('gpuCountersCollection', 'none')!='full-compute')">
          <xsl:choose>
           <xsl:when test="(exsl:ctx('ringBuffer', 0) &gt; 0) or (exsl:ctx('targetRingBuffer', 0) &gt; 0)">
            <xsl:choose>
             <xsl:when test="$isRunssApplicable">runss</xsl:when>
             <xsl:otherwise>runsa</xsl:otherwise>
            </xsl:choose>
           </xsl:when>
           <xsl:otherwise>runsa</xsl:otherwise>
          </xsl:choose>
         </xsl:when>
         <xsl:otherwise>
          <xsl:choose>
           <xsl:when test="$isRunssApplicable">runss</xsl:when>
           <xsl:otherwise>runsa</xsl:otherwise>
          </xsl:choose>
         </xsl:otherwise>
        </xsl:choose>
       </xsl:when>
       <xsl:otherwise>runsa</xsl:otherwise>
      </xsl:choose>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:variable>
   <xsl:choose>
    <xsl:when test="$runtoolToUse='runss'">
     <xsl:attribute name="id">runss</xsl:attribute>
    </xsl:when>
    <xsl:otherwise>
     <xsl:attribute name="id">runsa</xsl:attribute>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:choose>
    <xsl:when test="$runtoolToUse='runss'">
     <xsl:if test="not(exsl:ctx('isTPSSAvailable', 0)) and not(exsl:ctx('isPtraceAvailable', 0))">
      <xsl:value-of select="exsl:error('%RunssBasicHotspotsNotSupported')"/>
     </xsl:if>
     <xsl:if test="exsl:ctx('isPtraceScopeLimited', 0)">
      <xsl:value-of select="exsl:error('%RunssPtraceScopeLimited')"/>
     </xsl:if>
     <xsl:if test="exsl:ctx('PMU') = 'knl' and not(exsl:is_experimental('knl'))">
      <xsl:value-of select="exsl:error('%ThisAnalysisTypeIsNotApplicable')"/>
     </xsl:if>
     <collectorKnob knob="collectSamplesMode">stack</collectorKnob>
     <collectorKnob knob="samplingInterval">10</collectorKnob>
    </xsl:when>
    <xsl:otherwise>
     <xsl:copy-of select="document('config://analysis_type/include/prerequisites.xsl')/pmu_prerequisites/*"/>
     <collectorKnob knob="eventMode">all</collectorKnob>
     <boolean:collectorKnob knob="enableCSwitch">false</boolean:collectorKnob>
     <collectorKnob knob="pmuEventConfig">
      <xsl:value-of select="$mainEvents"/>
     </collectorKnob>
     <collectorKnob knob="pmuSamplingInterval">
      <xsl:value-of select="format-number(exsl:ctx('samplingInterval', 1), '#.####')"/>
     </collectorKnob>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:if test="exsl:ctx('kernelsToProfileAtk', 0)">
    <collectorKnob knob="kernelsToProfile">
     <xsl:value-of select="exsl:ctx('kernelsToProfileAtk', '')"/>
    </collectorKnob>
   </xsl:if>
   <xsl:choose>
    <xsl:when test="$collectGTPin = '1'">
     <collectorKnob knob="showInlinesByDefault">true</collectorKnob>
    </xsl:when>
    <xsl:otherwise>
     <collectorKnob knob="showInlinesByDefault">false</collectorKnob>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:choose>
    <xsl:when test="exsl:ctx('targetOS')='MacOSX'">
     <collectorKnob knob="collectGpuMetal">
      <xsl:value-of select="exsl:ctx('gpuOpenCLCollection', 0)"/>
     </collectorKnob>
    </xsl:when>
    <xsl:otherwise>
     <collectorKnob knob="collectGpuOpenCl">
      <xsl:value-of select="exsl:ctx('gpuOpenCLCollection', 0)"/>
     </collectorKnob>
    </xsl:otherwise>
   </xsl:choose>
   <xsl:if test="exsl:ctx('gpuProfilingModeAtk') = 'characterization'">
    <xsl:if test="exsl:ctx('metricsGroup') = 'overview'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>overview</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'global-local-accesses'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>global-local-accesses</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'compute-extended'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>compute-extended</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'full-compute'">
     <collectorKnob knob="gpuCounters">
      <xsl:text>full-compute</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('metricsGroup') = 'instruction-count'">
     <collectorKnob knob="gpuProfilingMode">
      <xsl:text>inscount</xsl:text>
     </collectorKnob>
    </xsl:if>
   </xsl:if>
   <xsl:if test="exsl:ctx('gpuProfilingModeAtk') = 'code-level-analysis'">
    <xsl:if test="exsl:ctx('profilingMode') = 'bb-latency'">
     <collectorKnob knob="gpuProfilingMode">
      <xsl:text>bblatency</xsl:text>
     </collectorKnob>
    </xsl:if>
    <xsl:if test="exsl:ctx('profilingMode') = 'mem-latency'">
     <collectorKnob knob="gpuProfilingMode">
      <xsl:text>memlatency</xsl:text>
     </collectorKnob>
    </xsl:if>
   </xsl:if>
   <xsl:if test="(exsl:ctx('gpuProfilingModeAtk') = 'characterization' and exsl:ctx('metricsGroup') = 'instruction-count') or         (exsl:ctx('gpuProfilingModeAtk') = 'code-level-analysis' and (exsl:ctx('profilingMode') = 'hw-sampling' or exsl:ctx('profilingMode') = 'bb-latency' or exsl:ctx('profilingMode') = 'mem-latency'))">
    <xsl:if test="not(exsl:ctx('gpuOpenCLCollection', 0))">
     <xsl:value-of select="exsl:error('%GTPinWithoutTracingError')"/>
    </xsl:if>
    <xsl:if test="exsl:ctx('collectMemoryBW', 0) and exsl:ctx('gpuProfilingModeAtk') = 'characterization'">
     <xsl:value-of select="exsl:error('%GTPinWithBandwidthError')"/>
    </xsl:if>
    <xsl:if test="exsl:ctx('gpuSamplingInterval', 0) and exsl:ctx('gpuProfilingModeAtk') = 'characterization'">
     <xsl:value-of select="exsl:warning('%GTPinWithSamplingIntervalWarning')"/>
    </xsl:if>
   </xsl:if>
   <collectorKnob knob="gpuUsage">
    <xsl:value-of select="exsl:ctx('gpuUsageCollection', 'true')"/>
   </collectorKnob>
   <collectorKnob knob="gpuSamplingInterval">
    <xsl:value-of select="format-number(exsl:ctx('gpuSamplingInterval', 1), '#.####')"/>
   </collectorKnob>
   <boolean:collectorKnob knob="inKernelProfilingAnalysis">true</boolean:collectorKnob>
   <xsl:if test="exsl:ctx('collectMemoryBW', 0) and exsl:ctx('gpuProfilingModeAtk') = 'characterization'">
    <xsl:choose>
     <xsl:when test="$runtoolToUse='runss'">
      <xsl:value-of select="exsl:error('%BandwidthIsNotWorkWithoutSampling')"/>
     </xsl:when>
     <xsl:otherwise>
      <boolean:collectorKnob knob="collectMemBandwidth">true</boolean:collectorKnob>
      <collectorKnob knob="dramBandwidthLimits">true</collectorKnob>
      <xsl:value-of select="exsl:warning('%BandwidthLimitsCollectionIsEnabledByDefaultWarning')"/>
     </xsl:otherwise>
    </xsl:choose>
   </xsl:if>
  </collector>
 </analysis>
</bag>
